{
  "address": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLine",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_NotEnoughEthEnterd",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__transferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recentWinner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatesTimeSnap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec449ac39478f9cc0c6ce5f00c18a7b32d3c9ab8d0c60f7b67b3b6763850e59b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x1613beB3B2C4f22Ee086B2b38C1476A3cE7f78E8",
    "transactionIndex": 0,
    "gasUsed": "1186919",
    "logsBloom": "0x
    "blockHash": "0x235bdf774a189920a69119dca1da7411f4471bc712e3b237e5c3b68cae3acadc",
    "transactionHash": "0xec449ac39478f9cc0c6ce5f00c18a7b32d3c9ab8d0c60f7b67b3b6763850e59b",
    "logs": [],
    "blockNumber": 36,
    "cumulativeGasUsed": "1186919",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "16",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "10000000000000000",
    "500000"
  ],
  "numDeployments": 2,
  "solcInputHash": "49eb91c4240e3ea072758bee7633fc19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLine\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_NotEnoughEthEnterd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__transferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recentWinner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatesTimeSnap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Francesc Oliveras (fxop0218)\",\"details\":\"This impllements VRF v2 and keepers from chainlink\",\"kind\":\"dev\",\"methods\":{\"getEntranceFee()\":{\"details\":\"This is the function that the chainlink keeper nodes call they look the \\\"upkeepNeeded to return true\"}},\"title\":\"Sample raffle smart contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract is for creating an untemperable decentraliced smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/* Pragma */\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\n/* Imports */\\r\\nerror Raffle_NotEnoughEthEnterd();\\r\\nerror Raffle__NotOpened();\\r\\nerror Raffle__transferFailed();\\r\\nerror Raffle_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\n/**\\r\\ns_ ==> storage\\r\\ni_ ==> imutable\\r\\n */\\r\\n\\r\\n/** @title Sample raffle smart contract\\r\\n *  @author Francesc Oliveras (fxop0218)\\r\\n *  @notice Contract is for creating an untemperable decentraliced smart contract\\r\\n *  @dev This impllements VRF v2 and keepers from chainlink\\r\\n */\\r\\n\\r\\n/* Contract */\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    /* State variables */\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_lotteryPlayers;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLine;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFITMATIONS = 3;\\r\\n\\r\\n    /* Raffle var */\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private immutable i_interval;\\r\\n    uint256 private immutable i_lastTimeStamp;\\r\\n\\r\\n    /* Events */\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed recentWinner);\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(\\r\\n        address vrfCordinatorV2,\\r\\n        uint64 subscriptionId,\\r\\n        bytes32 gasLine,\\r\\n        uint256 interval,\\r\\n        uint256 entranceFee,\\r\\n        uint32 callbackGasLimit\\r\\n    ) VRFConsumerBaseV2(vrfCordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCordinatorV2);\\r\\n        i_gasLine = gasLine;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        i_lastTimeStamp = interval;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n    function enterRaffle() public payable {\\r\\n        // Anyone can enter the raffle (public) and is needed pay (payable)\\r\\n        // require(msg.value > i_entranceFee); gass not efficient\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle_NotEnoughEthEnterd();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpened();\\r\\n        }\\r\\n        s_lotteryPlayers.push(payable(msg.sender));\\r\\n        // Events\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/ // Change calldata to memory if raises error\\r\\n    )\\r\\n        public\\r\\n        override\\r\\n        returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* Perform data */\\r\\n        )\\r\\n    {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = ((block.timestamp - i_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = (s_lotteryPlayers.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n        // (block.timestamp - last block timestamp) > interval\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes calldata /*performdata*/\\r\\n    ) external override {\\r\\n        // after this function is called selectRandomWinner\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle_UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_lotteryPlayers.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLine,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFITMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256, /*requestId*/\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        // Use modular operation s_lotteryPlayers = 10 -- randomNumber = 327678\\r\\n        // 327678 % 10 = 8\\r\\n        uint256 indexOfWinner = randomWords[0] % s_lotteryPlayers.length;\\r\\n        address payable winner = s_lotteryPlayers[indexOfWinner];\\r\\n        s_lotteryPlayers = new address payable[](0);\\r\\n        s_recentWinner = winner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        (bool success, ) = winner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\r\\n        if (!success) {\\r\\n            revert Raffle__transferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(winner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is the function that the chainlink keeper nodes call\\r\\n     * they look the \\\"upkeepNeeded to return true\\r\\n     *\\r\\n     */\\r\\n\\r\\n    /* Getters */\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_lotteryPlayers[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        // becuase get from memory == Pure\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_lotteryPlayers.length;\\r\\n    }\\r\\n\\r\\n    function getLatesTimeSnap() public view returns (uint256) {\\r\\n        return i_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce8a40d06eadbcd5a7634a60bcb7af56c57d54c775d53e1ffa37d97a318ee075\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b506040516200183338038062001833833981810160405281019062000038919062000296565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508160a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508467ffffffffffffffff166101008167ffffffffffffffff16815250508063ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000332565b5b021790555082610160818152505082610140818152505050505050505062000361565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001628262000135565b9050919050565b620001748162000155565b81146200018057600080fd5b50565b600081519050620001948162000169565b92915050565b600067ffffffffffffffff82169050919050565b620001b9816200019a565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b6000819050919050565b6200022f816200021a565b81146200023b57600080fd5b50565b6000815190506200024f8162000224565b92915050565b600063ffffffff82169050919050565b620002708162000255565b81146200027c57600080fd5b50565b600081519050620002908162000265565b92915050565b60008060008060008060c08789031215620002b657620002b562000130565b5b6000620002c689828a0162000183565b9650506020620002d989828a01620001c8565b9550506040620002ec89828a0162000203565b9450506060620002ff89828a016200023e565b93505060806200031289828a016200023e565b92505060a06200032589828a016200027f565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051611450620003e36000396000818161052201526107d30152600081816107b201526108790152600061067d0152600061065a01526000610639015260006105fd0152600081816102b401526103b10152600081816102f1015261034501526114506000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780636e04ff0d146101df57806391ad27b41461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b57806335a0f9ed146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610bda565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610c6c565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e20565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610bda565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ed7565b610546565b005b34801561019557600080fd5b5061019e610736565b6040516101ab9190610f65565b60405180910390f35b3480156101c057600080fd5b506101c9610760565b6040516101d69190610bda565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190611035565b61076f565b604051610214929190611118565b60405180910390f35b34801561022957600080fd5b50610232610875565b60405161023f9190610bda565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190611148565b61089d565b60405161027c9190610f65565b60405180910390f35b34801561029157600080fd5b5061029a6108e4565b6040516102a79190610bda565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190611175565b60405180910390fd5b6103ab82826108f0565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fe087033e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610bf5565b5b600160149054906101000a900460ff16600181111561043f5761043e610bf5565b5b14610476576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006105606040518060200160405280600081525061076f565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610bf5565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016105c69392919061119e565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610bf5565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be95949392919061124d565b6020604051808303816000875af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070191906112b5565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561079757610796610bf5565b5b600060018111156107ab576107aa610bf5565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000426107fd9190611311565b1190506000806000805490501190506000804711905083801561081d5750825b80156108265750815b801561082f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108b2576108b1611345565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061090b5761090a611345565b5b602002602001015161091d91906113a3565b9050600080828154811061093457610933611345565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561097c5761097b610cdd565b5b6040519080825280602002602001820160405280156109aa5781602001602082028036833780820191505090505b50600090805190602001906109c0929190610b1a565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2857610a27610bf5565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5390611405565b60006040518083038185875af1925050503d8060008114610a90576040519150601f19603f3d011682016040523d82523d6000602084013e610a95565b606091505b5050905080610ad0576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b93579160200282015b82811115610b925782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3a565b5b509050610ba09190610ba4565b5090565b5b80821115610bbd576000816000905550600101610ba5565b5090565b6000819050919050565b610bd481610bc1565b82525050565b6000602082019050610bef6000830184610bcb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c3557610c34610bf5565b5b50565b6000819050610c4682610c24565b919050565b6000610c5682610c38565b9050919050565b610c6681610c4b565b82525050565b6000602082019050610c816000830184610c5d565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca481610bc1565b8114610caf57600080fd5b50565b600081359050610cc181610c9b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1582610ccc565b810181811067ffffffffffffffff82111715610d3457610d33610cdd565b5b80604052505050565b6000610d47610c87565b9050610d538282610d0c565b919050565b600067ffffffffffffffff821115610d7357610d72610cdd565b5b602082029050602081019050919050565b600080fd5b6000610d9c610d9784610d58565b610d3d565b90508083825260208201905060208402830185811115610dbf57610dbe610d84565b5b835b81811015610de85780610dd48882610cb2565b845260208401935050602081019050610dc1565b5050509392505050565b600082601f830112610e0757610e06610cc7565b5b8135610e17848260208601610d89565b91505092915050565b60008060408385031215610e3757610e36610c91565b5b6000610e4585828601610cb2565b925050602083013567ffffffffffffffff811115610e6657610e65610c96565b5b610e7285828601610df2565b9150509250929050565b600080fd5b60008083601f840112610e9757610e96610cc7565b5b8235905067ffffffffffffffff811115610eb457610eb3610e7c565b5b602083019150836001820283011115610ed057610ecf610d84565b5b9250929050565b60008060208385031215610eee57610eed610c91565b5b600083013567ffffffffffffffff811115610f0c57610f0b610c96565b5b610f1885828601610e81565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4f82610f24565b9050919050565b610f5f81610f44565b82525050565b6000602082019050610f7a6000830184610f56565b92915050565b600080fd5b600067ffffffffffffffff821115610fa057610f9f610cdd565b5b610fa982610ccc565b9050602081019050919050565b82818337600083830152505050565b6000610fd8610fd384610f85565b610d3d565b905082815260208101848484011115610ff457610ff3610f80565b5b610fff848285610fb6565b509392505050565b600082601f83011261101c5761101b610cc7565b5b813561102c848260208601610fc5565b91505092915050565b60006020828403121561104b5761104a610c91565b5b600082013567ffffffffffffffff81111561106957611068610c96565b5b61107584828501611007565b91505092915050565b60008115159050919050565b6110938161107e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d35780820151818401526020810190506110b8565b60008484015250505050565b60006110ea82611099565b6110f481856110a4565b93506111048185602086016110b5565b61110d81610ccc565b840191505092915050565b600060408201905061112d600083018561108a565b818103602083015261113f81846110df565b90509392505050565b60006020828403121561115e5761115d610c91565b5b600061116c84828501610cb2565b91505092915050565b600060408201905061118a6000830185610f56565b6111976020830184610f56565b9392505050565b60006060820190506111b36000830186610bcb565b6111c06020830185610bcb565b6111cd6040830184610bcb565b949350505050565b6000819050919050565b6111e8816111d5565b82525050565b600067ffffffffffffffff82169050919050565b61120b816111ee565b82525050565b600061ffff82169050919050565b61122881611211565b82525050565b600063ffffffff82169050919050565b6112478161122e565b82525050565b600060a08201905061126260008301886111df565b61126f6020830187611202565b61127c604083018661121f565b611289606083018561123e565b611296608083018461123e565b9695505050505050565b6000815190506112af81610c9b565b92915050565b6000602082840312156112cb576112ca610c91565b5b60006112d9848285016112a0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131c82610bc1565b915061132783610bc1565b925082820390508181111561133f5761133e6112e2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ae82610bc1565b91506113b983610bc1565b9250826113c9576113c8611374565b5b828206905092915050565b600081905092915050565b50565b60006113ef6000836113d4565b91506113fa826113df565b600082019050919050565b6000611410826113e2565b915081905091905056fea26469706673582212207781f0f236b6f985eedee11283718419eccb46913d2994d5c545ae5f1e94a40864736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461018957806353a2c19a146101b45780636e04ff0d146101df57806391ad27b41461021d578063e55ae4e814610248578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b57806335a0f9ed146101355780634585e33b14610160575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610bda565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610c6c565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610e20565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061014a61051e565b6040516101579190610bda565b60405180910390f35b34801561016c57600080fd5b5061018760048036038101906101829190610ed7565b610546565b005b34801561019557600080fd5b5061019e610736565b6040516101ab9190610f65565b60405180910390f35b3480156101c057600080fd5b506101c9610760565b6040516101d69190610bda565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190611035565b61076f565b604051610214929190611118565b60405180910390f35b34801561022957600080fd5b50610232610875565b60405161023f9190610bda565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190611148565b61089d565b60405161027c9190610f65565b60405180910390f35b34801561029157600080fd5b5061029a6108e4565b6040516102a79190610bda565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190611175565b60405180910390fd5b6103ab82826108f0565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fe087033e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c610bf5565b5b600160149054906101000a900460ff16600181111561043f5761043e610bf5565b5b14610476576040517f21025eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006105606040518060200160405280600081525061076f565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610bf5565b5b6040517fe059521b0000000000000000000000000000000000000000000000000000000081526004016105c69392919061119e565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610bf5565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be95949392919061124d565b6020604051808303816000875af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070191906112b5565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff16600181111561079757610796610bf5565b5b600060018111156107ab576107aa610bf5565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000426107fd9190611311565b1190506000806000805490501190506000804711905083801561081d5750825b80156108265750815b801561082f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108b2576108b1611345565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b600080805490508260008151811061090b5761090a611345565b5b602002602001015161091d91906113a3565b9050600080828154811061093457610933611345565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600067ffffffffffffffff81111561097c5761097b610cdd565b5b6040519080825280602002602001820160405280156109aa5781602001602082028036833780820191505090505b50600090805190602001906109c0929190610b1a565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2857610a27610bf5565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5390611405565b60006040518083038185875af1925050503d8060008114610a90576040519150601f19603f3d011682016040523d82523d6000602084013e610a95565b606091505b5050905080610ad0576040517f9594d81300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b93579160200282015b82811115610b925782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b3a565b5b509050610ba09190610ba4565b5090565b5b80821115610bbd576000816000905550600101610ba5565b5090565b6000819050919050565b610bd481610bc1565b82525050565b6000602082019050610bef6000830184610bcb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c3557610c34610bf5565b5b50565b6000819050610c4682610c24565b919050565b6000610c5682610c38565b9050919050565b610c6681610c4b565b82525050565b6000602082019050610c816000830184610c5d565b92915050565b6000604051905090565b600080fd5b600080fd5b610ca481610bc1565b8114610caf57600080fd5b50565b600081359050610cc181610c9b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1582610ccc565b810181811067ffffffffffffffff82111715610d3457610d33610cdd565b5b80604052505050565b6000610d47610c87565b9050610d538282610d0c565b919050565b600067ffffffffffffffff821115610d7357610d72610cdd565b5b602082029050602081019050919050565b600080fd5b6000610d9c610d9784610d58565b610d3d565b90508083825260208201905060208402830185811115610dbf57610dbe610d84565b5b835b81811015610de85780610dd48882610cb2565b845260208401935050602081019050610dc1565b5050509392505050565b600082601f830112610e0757610e06610cc7565b5b8135610e17848260208601610d89565b91505092915050565b60008060408385031215610e3757610e36610c91565b5b6000610e4585828601610cb2565b925050602083013567ffffffffffffffff811115610e6657610e65610c96565b5b610e7285828601610df2565b9150509250929050565b600080fd5b60008083601f840112610e9757610e96610cc7565b5b8235905067ffffffffffffffff811115610eb457610eb3610e7c565b5b602083019150836001820283011115610ed057610ecf610d84565b5b9250929050565b60008060208385031215610eee57610eed610c91565b5b600083013567ffffffffffffffff811115610f0c57610f0b610c96565b5b610f1885828601610e81565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4f82610f24565b9050919050565b610f5f81610f44565b82525050565b6000602082019050610f7a6000830184610f56565b92915050565b600080fd5b600067ffffffffffffffff821115610fa057610f9f610cdd565b5b610fa982610ccc565b9050602081019050919050565b82818337600083830152505050565b6000610fd8610fd384610f85565b610d3d565b905082815260208101848484011115610ff457610ff3610f80565b5b610fff848285610fb6565b509392505050565b600082601f83011261101c5761101b610cc7565b5b813561102c848260208601610fc5565b91505092915050565b60006020828403121561104b5761104a610c91565b5b600082013567ffffffffffffffff81111561106957611068610c96565b5b61107584828501611007565b91505092915050565b60008115159050919050565b6110938161107e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110d35780820151818401526020810190506110b8565b60008484015250505050565b60006110ea82611099565b6110f481856110a4565b93506111048185602086016110b5565b61110d81610ccc565b840191505092915050565b600060408201905061112d600083018561108a565b818103602083015261113f81846110df565b90509392505050565b60006020828403121561115e5761115d610c91565b5b600061116c84828501610cb2565b91505092915050565b600060408201905061118a6000830185610f56565b6111976020830184610f56565b9392505050565b60006060820190506111b36000830186610bcb565b6111c06020830185610bcb565b6111cd6040830184610bcb565b949350505050565b6000819050919050565b6111e8816111d5565b82525050565b600067ffffffffffffffff82169050919050565b61120b816111ee565b82525050565b600061ffff82169050919050565b61122881611211565b82525050565b600063ffffffff82169050919050565b6112478161122e565b82525050565b600060a08201905061126260008301886111df565b61126f6020830187611202565b61127c604083018661121f565b611289606083018561123e565b611296608083018461123e565b9695505050505050565b6000815190506112af81610c9b565b92915050565b6000602082840312156112cb576112ca610c91565b5b60006112d9848285016112a0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131c82610bc1565b915061132783610bc1565b925082820390508181111561133f5761133e6112e2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113ae82610bc1565b91506113b983610bc1565b9250826113c9576113c8611374565b5b828206905092915050565b600081905092915050565b50565b60006113ef6000836113d4565b91506113fa826113df565b600082019050919050565b6000611410826113e2565b915081905091905056fea26469706673582212207781f0f236b6f985eedee11283718419eccb46913d2994d5c545ae5f1e94a40864736f6c63430008110033",
  "devdoc": {
    "author": "Francesc Oliveras (fxop0218)",
    "details": "This impllements VRF v2 and keepers from chainlink",
    "kind": "dev",
    "methods": {
      "getEntranceFee()": {
        "details": "This is the function that the chainlink keeper nodes call they look the \"upkeepNeeded to return true"
      }
    },
    "title": "Sample raffle smart contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Contract is for creating an untemperable decentraliced smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lotteryPlayers",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)203"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)203": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      }
    }
  }
}